#!/bin/sh
#
# Script for analyzing the record of the stock exchange system

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

COMMAND=""
WIDTH=""
FILE=""
ZIPS=""
DATETIME_START="0000-00-00 00:00:00"
DATETIME_END="9999-99-99 99:59:59"
TICKER=""

#######################################
# Throws error message to output.
# Globals:
#   None
# Arguments:
#   $*
# Output:
#   Writes err msg to stdout
#######################################
err()
{
	echo "[$(date +'%Y-%m-%d %H:%M:%S')]: $*" >&2
}

#######################################
# Information output --help / -h.
# Globals:
#   None
# Arguments:
#   None
#######################################
p_help()
{
	echo ""
	echo "Usage: tradelog [-h|--help] [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]] "
	echo ""
	echo "Script for analyzing the record of the stock exchange system"
	echo ""
	echo "Keys:"
	echo ""
	echo "	list-tick 	list of bought/sold tickers"
	echo "	profit		general trading profit"
	echo "	pos 		list of values of currently held positions"
	echo " 			in descending order by value"
	echo "	last-price 	last prices of bought/sold tickers"
	echo "	hist-ord 	statement of the histogram of the number"
	echo "			transactions according to the ticker"
	echo "	graph-pos	statement of the graph of values of held"
	echo "			positions according to the ticker"
	echo ""
	echo "Ordering options:"
	echo ""
	echo "	-a DATETIME	time FROM which to process the values"
	echo "			format: YYYY-MM-DD HH:MM:SS"
	echo "	-b DATETIME	time BEFORE which to process the values"
	echo "			format: YYYY-MM-DD HH:MM:SS"
	echo "	-w WIDTH  	sets width for graph-pos and pos"
	echo "			[!]can't be less or equal to zero"
	echo "			[!]can't be set more than one time"
	echo "	-t TICKER 	sets tickers for processing"
	echo "	-h, --help 	gives THIS information window :)"
	echo
}


#######################################
# Parsing given arguments.
# Globals:
#   @
#   COMMAND
#   WIDTH
#   FILE
#   ZIPS
#   DATETIME_START
#   DATETIME_END
#   TICKER
# Arguments:
#   None
#######################################
parse_args()
{

	while [ -n "$1" ]
	do
	case "$1" in
		-h | --help)
			p_help
			exit 0
			;;
		-a)
			DATETIME_START="$2"
			shift
			;;
		-b)
			DATETIME_END="$2"
			shift
			;;
		-t)
			if [ -z "$TICKER" ]; then
				TICKER=";$2;"
			else
				TICKER="$TICKER|;$2;"
			fi
			shift
			;;
		-w)
			if [ -z "$WIDTH" ];then

				if [ "$2" -gt 0 ];then
					WIDTH="$2"
					shift
				else
					err "width cant be less or equal to 0"
					exit 1
				fi

			else
				err "too much width"
				exit 1
			fi
			;;

		list-tick|profit|pos|last-price|hist-ord|graph-pos)
			COMMAND="$1"
			;;
		*.log)
			if [ -z "$FILE" ];then
				FILE="$1"
			else
				FILE="$1 $FILE"
			fi
			;;
		*.gz)
			if [ -z "$ZIPS" ];then
				ZIPS="$1"
			else
				ZIPS="$1 $ZIPS"
			fi
			;;
		*)
			err "bad args"
			exit 1
			;;
	esac
	shift
	done
}

#######################################
# Performing of parsed filters, commands, and submitting output
# Globals:
#   @
#   COMMAND
#   WIDTH
#   FILE
#   ZIPS
#   DATETIME_START
#   DATETIME_END
#   TICKER
# Arguments:
#   None
# Output:
#   Writes file after command to stdout
#######################################
use_commands()
{
	local TMP=""
	local MAX_N_SIZE=0			#max number size

	if [ -z "$ZIPS" ];then
		SHOW_FILE="cat $FILE"
	else
		SHOW_FILE="gzip -dc $ZIPS | cat $FILE -"
	fi

	TIME_FILTER="awk -F \";\" ' \
	{if ((\$1 < t2) && (\$1 > t1)) { print \$0 }}' \
	    t1='${DATETIME_START}' t2='${DATETIME_END}'"

	TICKERS_FILTER="grep -E '$TICKER'"

	DEFAULT='eval "$SHOW_FILE" \
	| eval "$TICKERS_FILTER" \
	| eval "$TIME_FILTER"'     #command that groups another cmmds

	case "$COMMAND" in
		"")

			eval "$DEFAULT"
			;;

		list-tick)

			eval "$DEFAULT" \
			| awk -F ";" '{ print $2 }' \
			| sort -u
			;;

		profit)

			eval "$DEFAULT" \
			| awk -F ";" '	
				BEGIN {sum = 0}
				{
				OFMT="%0.2f"
					if ($3 == "buy")
				{
					sum-=$4*$6
				}
				else
				{
					sum+=$4*$6;
				}
				}
				END { printf("%0.2f\n",sum) }'
			;;

		pos)

			TMP=`eval "$DEFAULT" \
			| sort -t ";" -k 2,2 \
			| awk -F ";" '

				BEGIN {sum = 0; ticker = "" ; price = 0}

				{

					if (ticker == "")
					{
						ticker = $2;
						price = $4
					}
					else if ( ticker != $2 )
					{
						printf("%s %.2f\n", \
						ticker, \
						sum*price)

						ticker = ""
						sum = 0
					}

					if ($3 == "sell")
						sum -=$6
					else
						sum += $6

					price = $4;

				}

				END {printf("%s %.2f\n",ticker,sum*price)}'`

			MAX_N_SIZE=`echo "$TMP" \
			| awk -F " " '
				function abs(x) {return x < 0 ? -x : x}

				BEGIN {max = 0}

				{
					tmp = length($2)
					if (tmp > max)
						max = tmp
				}

				END {print max}'`

			echo "$TMP" \
			| awk -v max_n_size="${MAX_N_SIZE}" '
				{
					printf("%-10s%c%*.2f\n", \
					$1,			 \
					":",			 \
					max_n_size+1,$2)
				}' \
			| sort -t ":" -rnk 2,2
			;;

		last-price)

			TMP=`eval "$DEFAULT" \
			| sort -r -t ";" -k 1,1 \
			| sort -u -t ";" -k 2,2 \
			| awk -F ";" '{print $2,$4}'`

			MAX_N_SIZE=`echo "$TMP" \
			| awk -F " " '
				function abs(x) {return x < 0 ? -x : x}

				BEGIN {max = 0}
				{
					tmp = length($2)
					if (tmp > max)
						max = tmp
				}

				END {print max}'`

			echo "$TMP" \
			| awk -v max_n_size="${MAX_N_SIZE}" '
				{
					printf("%-10s%c%*.2f\n", \
					$1,			 \
					":",			 \
					max_n_size+1, 		 \
					$2)
				}
				'
			;;

		hist-ord)

			eval "$DEFAULT" \
			| sort -t ";" -k 2,2 \
			| awk -F ";" -v width="${WIDTH}" '
				BEGIN {
					ticker = "" ; sum = 0
					if (int(width) == 0)
						width = 1
				}

				{

					if (ticker == "")
					{
						ticker = $2
					}
					else if (ticker != $2)
					{
						printf("%-10s%s",ticker,": ")

						for (i=0; i < sum*width ; i++)
							printf("%c","#")

						printf("\n")
						ticker = ""
						sum = 0
					}

					sum += 1

				}

				END {
					printf("%-10s%s",ticker,": ")

					for (i=0; i < sum*width ; i++)
						printf("%c","#")

					printf("\n")
				}
				'
			;;

		graph-pos)

			POS=`eval "$DEFAULT" \
			| sort -t ";" -k 2,2 \
			| awk -F ";" '
				BEGIN {sum = 0; ticker = "" ; price = 0}

				{
					if ( ticker == "" )
					{
						ticker = $2;
						price = $4
					}
					else if ( ticker != $2 )
					{
						printf("%-10s%s%.2f\n", \
						ticker,			\
						":",			\
						sum*price)

						ticker = ""
						sum = 0
					}

					if ($3 == "sell")
						sum -=$6
					else
						sum += $6

					price = $4;

				}
				END {printf("%-10s%s%.2f\n", \
				ticker,			     \
				":",			     \
				sum*price)}

				'|
				sort -r -n -t ":" -k 2`

			MAX_ABS=`echo "$POS" \
			| awk -F ":" '
				BEGIN {max_abs = 0}

				function abs(x) {return x < 0 ? -x : x}

				{
					if (abs($2) > max_abs)
						max_abs = abs($2)
				}

				END {print max_abs}'`

			echo "$POS" \
			| awk -F ":" -v max_abs="${MAX_ABS}" \
			 			-v width="${WIDTH}" '

				function round(x) {return int(x)}

				BEGIN {
					if (width == 0)
						width = 1000
					percent = round(max_abs / width)
				}

				{
					size = round($2 / percent)
					printf("%s%c",$1,":")	

					if (size >= 1 || size <= -1)
						printf("%c"," ")

					if (size > 0)
						{

						for (i=0 ; i < size ; i++)
							printf("%c","#")

						}
					else
						{

						for (i=0 ; i < -size ; i++)
							printf("%c","!")

						}

					printf("%c","\n")
				}
						 ' | sort
			;;

	esac
}

parse_args "$@"
use_commands
